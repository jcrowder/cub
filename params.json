{"name":"Cub","tagline":"Pseudolocalization library for Java","body":"cub\r\n===\r\n\r\nThis library provides a tool and an API to perform pseudolocalization.\r\nPseudolocalization generates a fake translation of messages of a program,\r\nwhich helps to highlight weaknesses and bugs in the original program regarding\r\nlocalization.\r\n\r\nFor instance, you may transform a message such as `pseudolocalization` into its accented form `þšéûðöļöçåļîžåţîöñ`, in order to easily spot which messages in your UI are not externalized or translated yet.\r\n\r\nUsage\r\n=====\r\n\r\nTo pseudo-localize a Macintosh or iPhone `.strings` file:\r\n\r\n```sh\r\nmvn clean package\r\njava -jar target/cub-1.0-SNAPSHOT.jar --method=html,accents,brackets --type=strings <path to Localizable.string>\r\n```\r\n\r\nTo pseudo-localize an Android `.xml` file:\r\n\r\n```sh\r\nmvn clean package\r\njava -jar target/cub-1.0-SNAPSHOT.jar --method=html,accents,brackets --type=xml <path to strings.xml>\r\n```\r\n\r\nAPI\r\n===\r\n\r\nThe library includes a structured message API to allow it to be used for\r\ncomplex multi-part messages, and includes the following pseudolocalization\r\nmethods:\r\n\r\n  - accenter: replaces US-ASCII characters with accented versions, to make\r\n    it obvious if parts of the output are hard-coded in the program and can't\r\n    be localized\r\n  - brackets: adds [brackets] around each message, to show where messages\r\n    have been concatenated together. This is a localization problem because\r\n    some languages may need to reorder phrases or the translation may change\r\n    depending on what is around it.\r\n  - expander: makes each message longer, to show where the UI doesn't give\r\n    enough space for languages that result in longer strings, and either\r\n    wraps awkwardly or truncates.\r\n  - fakebidi: produces fake Right-to-Left text, using the original source\r\n    text and wrapping LTR text with RTL markers, so that it renders as if it\r\n    were RTL text but is still mostly readable to someone who doesn't speak\r\n    Arabic or Hebrew.\r\n  - piglatin: translates English messages into [Pig Latin](http://en.wikipedia.org/wiki/Pig_Latin)\r\n\r\nThese methods can be combined in any order and with user-written methods. In\r\naddition, HTML tags can optionally be preserved (it is not recommended to give\r\nthem to the translator, but especially simple tags show up in translatable\r\ntext frequently).\r\n\r\nThese can also be accessed via locale variant subtags, which we hope to get\r\nstandardized. A variant subtag of psaccent corresponds to accenter, expander,\r\nand brackets (in that order), and a variant subtag of psbidi corresponds to\r\nfakebidi.\r\n\r\nSupported formats\r\n=================\r\n\r\nThis library supports Java properties files, Android XML files, iOS and Mac Strings files, YAML.\r\n\r\nLicense\r\n=======\r\n\r\nThis project is licensed as per the terms of the Apache 2 License.\r\n\r\nAdditional Credits\r\n==================\r\n\r\nThis project is a fork of Google's [pseudolocalization-tool](https://code.google.com/p/pseudolocalization-tool), which was originally written by [@jflesch](https://github.com/jflesch) and open-sourced by [@andyst](https://github.com/andyst).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}